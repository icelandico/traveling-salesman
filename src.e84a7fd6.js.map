{"version":3,"sources":["../assets/templates/inputsTemplate.js","../assets/Canvas.js","../assets/CanvasPoints.js","../assets/CoordinateSolver.js","../assets/canvasGrid.js","index.js"],"names":["inputsTemplate","counter","Canvas","document","getElementById","canvas","width","height","Math","floor","canvas_height","grid_size","canvas_width","num_lines_x","num_lines_y","CanvasPoints","canvasPoints","getContext","canvasPointsContext","translate","y_axis_distance_grid_lines","x_axis_distance_grid_lines","x","y","moveTo","arc","PI","restore","clearRect","points","clearCanvasContext","forEach","point","beginPath","drawPoint","fillStyle","fill","CoordinateSolver","querySelector","querySelectorAll","calculatePath","addEventListener","getPath","addPoint","createInput","clearValues","clearEntries","removeCoordinatesButton","button","removeCoordinates","areInputsNotEmpty","inputContainer","insertAdjacentHTML","drawPointsLayer","getCoordinates","alert","lastInputs","Array","from","map","el","value","filter","Boolean","length","coordinates","emptyInputs","item","Object","values","includes","NaN","calculateDistances","paths","showAllPaths","segments","middleSegments","showPathsNumber","segmentDistances","segment","pair","hypot","sumDistances","reduce","a","b","getShortestPathStats","path","result","i","push","distances","shortestDistance","min","apply","shortestPathIndex","indexOf","shortestPath","shortestPathSegments","showShortestPathStats","distance","clearParagraphValues","paragraphDistance","paragraphOrder","pathsSegments","innerHTML","parseFloat","toFixed","inputValuesX","inputValuesY","valuesX","valuesY","index","id","combinations","array","slice","generate","n","temporary","swap","pointsElements","parseInt","pointsArray","showCombinations","unshift","paragraph","removeInputs","addedElements","initialInput","remove","CanvasGrid","ctx","lineWidth","strokeStyle","lineTo","stroke","font","textAlign","fillText","x_axis_starting_point","y_axis_starting_point","coordinateSolver","canvasGrid","initListeners","drawGrid"],"mappings":"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","file":"src.e84a7fd6.js","sourceRoot":"..\\src","sourcesContent":["export const inputsTemplate = (counter) => {\n  return `\n      <div class=\"coordinates__set-container coordinates__set-${counter} coordinates__set-added\" id=\"${counter}\">\n        <span class=\"coordinates__set-counter\">${counter}.</span>\n        <label>\n          X\n          <input type=\"text\" class=\"coords coordinate-x\">\n        </label>\n        <label>\n          Y\n          <input type=\"text\" class=\"coords coordinate-y\">\n        </label>\n        ${\n          counter >= 1 &&\n          '<span class=\"button button--danger coordinates__remove\">Remove</span>'\n        }\n      </div>    \n      `;\n};\n","export default class Canvas {\n  canvas = document.getElementById(\"chart-grid\");\n  grid_size = 17;\n  canvas_width = this.canvas.width;\n  canvas_height = this.canvas.height;\n  num_lines_x = Math.floor(this.canvas_height / this.grid_size);\n  num_lines_y = Math.floor(this.canvas_width / this.grid_size);\n  x_axis_distance_grid_lines = Math.floor(this.num_lines_x / 2);\n  y_axis_distance_grid_lines = Math.floor(this.num_lines_y / 2);\n}\n","import Canvas from \"./Canvas\";\n\nexport default class CanvasPoints extends Canvas {\n  canvasPoints = document.getElementById(\"chart-points\");\n  canvasPointsContext = this.canvasPoints.getContext(\"2d\");\n\n  translateGrid() {\n    this.canvasPointsContext.translate(\n      this.y_axis_distance_grid_lines * this.grid_size,\n      this.x_axis_distance_grid_lines * this.grid_size\n    );\n  }\n\n  drawPoint(x, y) {\n    this.canvasPointsContext.moveTo(\n      this.grid_size * x + 0.5,\n      this.grid_size * y + 0.5\n    );\n    this.canvasPointsContext.arc(\n      this.grid_size * x + 0.5,\n      this.grid_size * y * -1 + 0.5,\n      6,\n      0,\n      Math.PI * 2,\n      true\n    );\n  }\n\n  clearCanvasContext() {\n    this.canvasPointsContext.restore();\n    this.canvasPointsContext.clearRect(\n      -this.x_axis_distance_grid_lines * -this.grid_size,\n      -this.y_axis_distance_grid_lines * this.grid_size,\n      this.canvas_width,\n      this.canvas_height\n    );\n  }\n\n  drawPointsLayer(points) {\n    this.clearCanvasContext();\n    points.forEach((point) => {\n      this.canvasPointsContext.beginPath();\n      this.drawPoint(point.x, point.y);\n      this.canvasPointsContext.fillStyle = \"#1e3383\";\n      this.canvasPointsContext.fill();\n    });\n  }\n}\n","import { inputsTemplate } from \"./templates/inputsTemplate\";\nimport CanvasPoints from \"./CanvasPoints\";\n\nexport default class CoordinateSolver {\n  counter = 1;\n  addPoint = document.querySelector(\"#add-point\");\n  clearValues = document.querySelector(\"#clear\");\n  inputContainer = document.querySelector(\".coordinates__inputs-container\");\n  calculatePath = document.querySelector(\"#calculate\");\n  removeCoordinatesButton = document.querySelectorAll(\".coordinates__remove\");\n  pointCoordinates = [];\n\n  constructor() {\n    this.canvasPoints = new CanvasPoints();\n  }\n\n  initListeners() {\n    this.calculatePath.addEventListener(\"click\", () => this.getPath());\n    this.addPoint.addEventListener(\"click\", () => this.createInput());\n    this.clearValues.addEventListener(\"click\", () => this.clearEntries());\n    this.removeCoordinatesButton.forEach((button) =>\n      button.addEventListener(\"click\", () => this.removeCoordinates())\n    );\n  }\n\n  createInput() {\n    if (!this.areInputsNotEmpty()) {\n      alert(\"Fill X and Y\");\n      return;\n    }\n    this.inputContainer.insertAdjacentHTML(\n      \"beforeend\",\n      inputsTemplate(this.counter)\n    );\n    this.counter += 1;\n    this.canvasPoints.drawPointsLayer(this.getCoordinates());\n  }\n\n  removeCoordinates() {}\n\n  areInputsNotEmpty() {\n    const lastInputs = document.querySelectorAll(\n      `.coordinates__set-${this.counter - 1} .coords`\n    );\n    return (\n      Array.from(lastInputs)\n        .map((el) => !!el.value)\n        .filter(Boolean).length === 2\n    );\n  }\n\n  getPath() {\n    const coordinates = this.getCoordinates();\n    let emptyInputs = 0;\n    coordinates.forEach((item) =>\n      Object.values(item).includes(NaN) ? (emptyInputs += 1) : false\n    );\n    emptyInputs || coordinates.length === 1\n      ? alert(\"Fill all inputs or type at least two points!\")\n      : this.calculateDistances(coordinates);\n    this.canvasPoints.drawPointsLayer(this.getCoordinates());\n  }\n\n  calculateDistances(coordinates) {\n    const paths = this.showAllPaths();\n    const segments = this.middleSegments(paths);\n    this.showPathsNumber(paths);\n    const segmentDistances = segments.map((segment) =>\n      segment.map((pair) =>\n        Math.hypot(\n          coordinates[pair[1]].x - coordinates[pair[0]].x,\n          coordinates[pair[1]].y - coordinates[pair[0]].y\n        )\n      )\n    );\n    const sumDistances = segmentDistances.map((segment) =>\n      segment.reduce((a, b) => a + b)\n    );\n    this.getShortestPathStats(sumDistances, paths, segmentDistances);\n  }\n\n  middleSegments(segments) {\n    return segments.map((path) => {\n      let result = [];\n      for (let i = 0; i < path.length - 1; i++) {\n        result.push([path[i], path[i + 1]]);\n      }\n      return result;\n    });\n  }\n\n  getShortestPathStats(distances, paths, segments) {\n    const shortestDistance = Math.min.apply(null, distances);\n    const shortestPathIndex = distances.indexOf(shortestDistance);\n    const shortestPath = paths[shortestPathIndex];\n    const shortestPathSegments = segments[shortestPathIndex];\n    this.showShortestPathStats(\n      shortestPath,\n      shortestDistance,\n      shortestPathSegments\n    );\n  }\n\n  showShortestPathStats(path, distance, segments) {\n    this.clearParagraphValues();\n    const paragraphDistance = document.querySelector(\".path-distance\");\n    const paragraphOrder = document.querySelector(\".path-order\");\n    const pathsSegments = document.querySelector(\".path-segments\");\n    path.forEach((point) => {\n      paragraphOrder.innerHTML += \" \" + point;\n    });\n    segments.forEach((segment) => {\n      pathsSegments.innerHTML += \" \" + parseFloat(segment.toFixed(2));\n    });\n    paragraphDistance.innerHTML = parseFloat(distance.toFixed(2));\n  }\n\n  showPathsNumber(paths) {\n    const paragraphPaths = document.querySelector(\".paths-number\");\n    paragraphPaths.innerHTML = paths.length;\n  }\n\n  getCoordinates() {\n    const inputValuesX = Array.from(document.querySelectorAll(\".coordinate-x\"));\n    const inputValuesY = Array.from(document.querySelectorAll(\".coordinate-y\"));\n    const valuesX = inputValuesX.map((item) => parseFloat(item.value));\n    const valuesY = inputValuesY.map((item) => parseFloat(item.value));\n    return valuesX.map((x, index) => ({ id: index, x: x, y: valuesY[index] }));\n  }\n\n  showCombinations(points) {\n    let combinations = [];\n    let array = points.slice();\n\n    function swap(a, b) {\n      let temporary = array[a];\n      array[a] = array[b];\n      array[b] = temporary;\n    }\n\n    function generate(n) {\n      if (n === 1) {\n        combinations.push(array.slice());\n      } else {\n        for (let i = 0; i <= n - 1; i++) {\n          generate(n - 1, array);\n          swap(n % 2 === 0 ? i : 0, n - 1);\n        }\n      }\n    }\n    generate(array.length, array);\n    return combinations;\n  }\n\n  showAllPaths() {\n    const pointsElements = Array.from(\n      document.querySelectorAll(\".coordinates__set-container\")\n    );\n    const points = pointsElements.map((item) => parseInt(item.id));\n    let pointsArray = this.showCombinations(points.slice(1));\n    for (let i = 0; i < pointsArray.length; i++) {\n      pointsArray[i].unshift(points[0]);\n      pointsArray[i].push(points[0]);\n    }\n    return pointsArray;\n  }\n\n  clearParagraphValues() {\n    const paragraphs = document.querySelectorAll(\".path-info\");\n    paragraphs.forEach((paragraph) => (paragraph.innerHTML = \"\"));\n  }\n\n  clearEntries() {\n    const results = document.querySelectorAll(\".result\");\n    results.forEach((item) => {\n      item.innerHTML = \"\";\n    });\n    this.removeInputs();\n    this.canvasPoints.drawPointsLayer(this.getCoordinates());\n  }\n\n  removeInputs() {\n    const addedElements = document.querySelectorAll(\".coordinates__set-added\");\n    const initialInput = document.querySelectorAll(\".coords\");\n    addedElements.forEach((item) => item.remove());\n    initialInput.forEach((item) => (item.value = \"\"));\n    this.counter = 1;\n  }\n}\n","import Canvas from \"./Canvas\";\n\nexport default class CanvasGrid extends Canvas {\n  canvas = document.getElementById(\"chart-grid\");\n\n  drawGrid() {\n    const ctx = this.canvas.getContext(\"2d\");\n    const x_axis_starting_point = 1;\n    const y_axis_starting_point = 1;\n\n    // Draw grid lines along X-axis\n    for (let i = 0; i <= this.num_lines_x; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n\n      // If line represents X-axis draw in different color\n      if (i === this.x_axis_distance_grid_lines) ctx.strokeStyle = \"#000000\";\n      else ctx.strokeStyle = \"#acacac\";\n\n      if (i === this.num_lines_x) {\n        ctx.moveTo(0, this.grid_size * i);\n        ctx.lineTo(this.canvas_width, this.grid_size * i);\n      } else {\n        ctx.moveTo(0, this.grid_size * i + 0.5);\n        ctx.lineTo(this.canvas_width, this.grid_size * i + 0.5);\n      }\n      ctx.stroke();\n    }\n\n    // Draw grid lines along Y-axis\n    for (let i = 0; i <= this.num_lines_y; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n\n      // If line represents X-axis draw in different color\n      if (i === this.y_axis_distance_grid_lines) {\n        ctx.strokeStyle = \"#121418\";\n      } else {\n        ctx.strokeStyle = \"#acacac\";\n      }\n\n      if (i === this.num_lines_y) {\n        ctx.moveTo(this.grid_size * i, 0);\n        ctx.lineTo(this.grid_size * i, this.canvas_height);\n      } else {\n        ctx.moveTo(this.grid_size * i + 0.5, 0);\n        ctx.lineTo(this.grid_size * i + 0.5, this.canvas_height);\n      }\n      ctx.stroke();\n    }\n\n    // Translate to the new origin. Now Y-axis of the canvas is opposite to the Y-axis of the graph. So the y-coordinate of each element will be negative of the actual\n    ctx.translate(\n      this.y_axis_distance_grid_lines * this.grid_size,\n      this.x_axis_distance_grid_lines * this.grid_size\n    );\n\n    // Ticks marks along the positive X-axis\n    for (\n      let i = 1;\n      i < this.num_lines_y - this.y_axis_distance_grid_lines;\n      i++\n    ) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      // Draw a tick mark 6px long (-3 to 3)\n      ctx.moveTo(this.grid_size * i + 0.5, -3);\n      ctx.lineTo(this.grid_size * i + 0.5, 3);\n      ctx.stroke();\n\n      // Text value at that point\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"start\";\n      ctx.fillText(`${x_axis_starting_point * i}`, this.grid_size * i - 2, 15);\n    }\n\n    // Ticks marks along the negative X-axis\n    for (let i = 1; i < this.y_axis_distance_grid_lines; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      // Draw a tick mark 6px long (-3 to 3)\n      ctx.moveTo(-this.grid_size * i + 0.5, -3);\n      ctx.lineTo(-this.grid_size * i + 0.5, 3);\n      ctx.stroke();\n\n      // Text value at that point\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"end\";\n      ctx.fillText(\n        `${-x_axis_starting_point * i}`,\n        -this.grid_size * i + 3,\n        15\n      );\n    }\n\n    // Ticks marks along the positive Y-axis\n    // Positive Y-axis of graph is negative Y-axis of the canvas\n    for (\n      let i = 1;\n      i < this.num_lines_x - this.x_axis_distance_grid_lines;\n      i++\n    ) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      // Draw a tick mark 6px long (-3 to 3)\n      ctx.moveTo(-3, this.grid_size * i + 0.5);\n      ctx.lineTo(3, this.grid_size * i + 0.5);\n      ctx.stroke();\n\n      // Text value at that point\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"start\";\n      ctx.fillText(`${-y_axis_starting_point * i}`, 8, this.grid_size * i + 3);\n    }\n\n    // Ticks marks along the negative Y-axis\n    // Negative Y-axis of graph is positive Y-axis of the canvas\n    for (let i = 1; i < this.x_axis_distance_grid_lines; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      // Draw a tick mark 6px long (-3 to 3)\n      ctx.moveTo(-3, -this.grid_size * i + 0.5);\n      ctx.lineTo(3, -this.grid_size * i + 0.5);\n      ctx.stroke();\n\n      // Text value at that point\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"start\";\n      ctx.fillText(`${y_axis_starting_point * i}`, 8, -this.grid_size * i + 3);\n    }\n  }\n}\n","import CoordinateSolver from \"./../assets/CoordinateSolver\";\nimport CanvasGrid from \"../assets/canvasGrid\";\n\nconst coordinateSolver = new CoordinateSolver();\nconst canvasGrid = new CanvasGrid();\n\ncoordinateSolver.initListeners();\ncanvasGrid.drawGrid();\n"]}