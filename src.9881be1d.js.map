{"version":3,"sources":["../assets/templates/inputsTemplate.js","../assets/Canvas.js","../assets/CanvasPointsLabels.js","../assets/CanvasPoints.js","../assets/CoordinateSolver.js","../assets/CanvasGrid.js","index.js"],"names":["inputsTemplate","counter","Canvas","document","getElementById","canvas","width","height","Math","floor","canvas_height","grid_size","canvas_width","num_lines_x","num_lines_y","CanvasPointsLabels","canvasPointsLabels","getContext","translateGrid","canvasPointsLabelsContext","translate","y_axis_distance_grid_lines","x_axis_distance_grid_lines","id","x","y","labelX","labelY","fillStyle","font","fillText","restore","clearRect","CanvasPoints","canvasPoints","clearCanvasContext","bind","pointsLabels","canvasPointsContext","arc","PI","points","forEach","point","beginPath","drawPoint","drawLabel","fill","CoordinateSolver","querySelector","querySelectorAll","calculatePath","addEventListener","getPath","addPoint","createInput","clearValues","clearEntries","areInputsNotEmpty","inputContainer","insertAdjacentHTML","drawPointsLayer","getCoordinates","alert","lastInputs","Array","from","map","el","value","filter","Boolean","length","coordinates","emptyInputs","item","Object","values","includes","NaN","calculateDistances","paths","showAllPaths","segments","middleSegments","showPathsNumber","segmentDistances","segment","pair","hypot","sumDistances","reduce","a","b","getShortestPathStats","path","result","i","push","distances","shortestDistance","min","apply","shortestPathIndex","indexOf","shortestPath","shortestPathSegments","showShortestPathStats","distance","clearParagraphValues","paragraphDistance","paragraphOrder","pathsSegments","innerHTML","parseFloat","toFixed","inputValuesX","inputValuesY","valuesX","valuesY","index","combinations","array","slice","generate","n","temporary","swap","pointsElements","parseInt","pointsArray","showCombinations","unshift","paragraph","removeInputs","addedElements","initialInput","remove","CanvasGrid","ctx","lineWidth","strokeStyle","moveTo","lineTo","stroke","textAlign","x_axis_starting_point","y_axis_starting_point","coordinateSolver","canvasGrid","initListeners","drawGrid"],"mappings":"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","file":"src.9881be1d.js","sourceRoot":"..\\src","sourcesContent":["export const inputsTemplate = (counter) => {\n  return `\n      <div class=\"coordinates__set-container coordinates__set-${counter} coordinates__set-added\" id=\"${counter}\">\n        <span class=\"coordinates__set-counter\">${counter}.</span>\n        <label>\n          X\n          <input type=\"text\" class=\"coords coordinate-x\">\n        </label>\n        <label>\n          Y\n          <input type=\"text\" class=\"coords coordinate-y\">\n        </label>\n      </div>    \n      `;\n};\n","export default class Canvas {\n  canvas = document.getElementById(\"chart-grid\");\n  grid_size = 17;\n  canvas_width = this.canvas.width;\n  canvas_height = this.canvas.height;\n  num_lines_x = Math.floor(this.canvas_height / this.grid_size);\n  num_lines_y = Math.floor(this.canvas_width / this.grid_size);\n  x_axis_distance_grid_lines = Math.floor(this.num_lines_x / 2);\n  y_axis_distance_grid_lines = Math.floor(this.num_lines_y / 2);\n}\n","import Canvas from \"./Canvas\";\n\nexport default class CanvasPointsLabels extends Canvas {\n  canvasPointsLabels = document.getElementById(\"chart-points-labels\");\n  canvasPointsLabelsContext = this.canvasPointsLabels.getContext(\"2d\");\n\n  constructor() {\n    super();\n    this.translateGrid();\n  }\n\n  translateGrid() {\n    this.canvasPointsLabelsContext.translate(\n      this.y_axis_distance_grid_lines * this.grid_size,\n      this.x_axis_distance_grid_lines * this.grid_size\n    );\n  }\n\n  drawLabel({ id, x, y }) {\n    const labelX = this.grid_size * x + 3;\n    const labelY = this.grid_size * y * -1 - 5;\n    this.canvasPointsLabelsContext.fillStyle = \"#292929\";\n    this.canvasPointsLabelsContext.font = \"600 16px Consolas\";\n    this.canvasPointsLabelsContext.fillText(id, labelX, labelY);\n  }\n\n  clearCanvasContext() {\n    this.canvasPointsLabelsContext.restore();\n    this.canvasPointsLabelsContext.clearRect(\n      -this.x_axis_distance_grid_lines * this.grid_size,\n      -this.y_axis_distance_grid_lines * this.grid_size,\n      this.canvas_width,\n      this.canvas_height\n    );\n  }\n}\n","import Canvas from \"./Canvas\";\nimport CanvasPointsLabels from \"./CanvasPointsLabels\";\n\nexport default class CanvasPoints extends Canvas {\n  canvasPoints = document.getElementById(\"chart-points\");\n  canvasPointsContext = this.canvasPoints.getContext(\"2d\");\n\n  constructor() {\n    super();\n    this.translateGrid();\n    this.clearCanvasContext = this.clearCanvasContext.bind(this);\n    this.pointsLabels = new CanvasPointsLabels();\n  }\n\n  translateGrid() {\n    this.canvasPointsContext.translate(\n      this.y_axis_distance_grid_lines * this.grid_size,\n      this.x_axis_distance_grid_lines * this.grid_size\n    );\n  }\n\n  drawPoint({ x, y }) {\n    // this.canvasPointsContext.moveTo(\n    //   this.grid_size * x + 0.5,\n    //   this.grid_size * y + 0.5\n    // );\n    this.canvasPointsContext.arc(\n      this.grid_size * x + 0.5,\n      this.grid_size * y * -1 + 0.5,\n      6,\n      0,\n      Math.PI * 2,\n      true\n    );\n  }\n\n  clearCanvasContext() {\n    this.pointsLabels.clearCanvasContext();\n    this.canvasPointsContext.restore();\n    this.canvasPointsContext.clearRect(\n      -this.x_axis_distance_grid_lines * this.grid_size,\n      -this.y_axis_distance_grid_lines * this.grid_size,\n      this.canvas_width,\n      this.canvas_height\n    );\n  }\n\n  drawPointsLayer(points) {\n    this.clearCanvasContext();\n    points.forEach((point) => {\n      this.canvasPointsContext.beginPath();\n      this.drawPoint(point);\n      this.pointsLabels.drawLabel(point);\n      this.canvasPointsContext.fillStyle = \"#1e3383\";\n      this.canvasPointsContext.fill();\n    });\n  }\n}\n","import { inputsTemplate } from \"./templates/inputsTemplate\";\nimport CanvasPoints from \"./CanvasPoints\";\n\nexport default class CoordinateSolver {\n  counter = 1;\n  addPoint = document.querySelector(\"#add-point\");\n  clearValues = document.querySelector(\"#clear\");\n  inputContainer = document.querySelector(\".coordinates__inputs-container\");\n  calculatePath = document.querySelector(\"#calculate\");\n  removeCoordinatesButton = document.querySelectorAll(\".coordinates__remove\");\n  pointCoordinates = [];\n\n  constructor() {\n    this.canvasPoints = new CanvasPoints();\n  }\n\n  initListeners() {\n    this.calculatePath.addEventListener(\"click\", () => this.getPath());\n    this.addPoint.addEventListener(\"click\", () => this.createInput());\n    this.clearValues.addEventListener(\"click\", () => this.clearEntries());\n  }\n\n  createInput() {\n    if (!this.areInputsNotEmpty()) {\n      alert(\"Fill X and Y\");\n      return;\n    }\n    this.inputContainer.insertAdjacentHTML(\n      \"beforeend\",\n      inputsTemplate(this.counter)\n    );\n    this.counter += 1;\n    this.canvasPoints.drawPointsLayer(this.getCoordinates());\n  }\n\n  areInputsNotEmpty() {\n    const lastInputs = document.querySelectorAll(\n      `.coordinates__set-${this.counter - 1} .coords`\n    );\n    return (\n      Array.from(lastInputs)\n        .map((el) => !!el.value)\n        .filter(Boolean).length === 2\n    );\n  }\n\n  getPath() {\n    const coordinates = this.getCoordinates();\n    let emptyInputs = 0;\n    coordinates.forEach((item) =>\n      Object.values(item).includes(NaN) ? (emptyInputs += 1) : false\n    );\n    emptyInputs || coordinates.length === 1\n      ? alert(\"Fill all inputs or type at least two points!\")\n      : this.calculateDistances(coordinates);\n    this.canvasPoints.drawPointsLayer(this.getCoordinates());\n  }\n\n  calculateDistances(coordinates) {\n    const paths = this.showAllPaths();\n    const segments = this.middleSegments(paths);\n    this.showPathsNumber(paths);\n    const segmentDistances = segments.map((segment) =>\n      segment.map((pair) =>\n        Math.hypot(\n          coordinates[pair[1]].x - coordinates[pair[0]].x,\n          coordinates[pair[1]].y - coordinates[pair[0]].y\n        )\n      )\n    );\n    const sumDistances = segmentDistances.map((segment) =>\n      segment.reduce((a, b) => a + b)\n    );\n    this.getShortestPathStats(sumDistances, paths, segmentDistances);\n  }\n\n  middleSegments(segments) {\n    return segments.map((path) => {\n      let result = [];\n      for (let i = 0; i < path.length - 1; i++) {\n        result.push([path[i], path[i + 1]]);\n      }\n      return result;\n    });\n  }\n\n  getShortestPathStats(distances, paths, segments) {\n    const shortestDistance = Math.min.apply(null, distances);\n    const shortestPathIndex = distances.indexOf(shortestDistance);\n    const shortestPath = paths[shortestPathIndex];\n    const shortestPathSegments = segments[shortestPathIndex];\n    this.showShortestPathStats(\n      shortestPath,\n      shortestDistance,\n      shortestPathSegments\n    );\n  }\n\n  showShortestPathStats(path, distance, segments) {\n    this.clearParagraphValues();\n    const paragraphDistance = document.querySelector(\".path-distance\");\n    const paragraphOrder = document.querySelector(\".path-order\");\n    const pathsSegments = document.querySelector(\".path-segments\");\n    path.forEach((point) => {\n      paragraphOrder.innerHTML += \" \" + point;\n    });\n    segments.forEach((segment) => {\n      pathsSegments.innerHTML += \" \" + parseFloat(segment.toFixed(2));\n    });\n    paragraphDistance.innerHTML = parseFloat(distance.toFixed(2));\n  }\n\n  showPathsNumber(paths) {\n    const paragraphPaths = document.querySelector(\".paths-number\");\n    paragraphPaths.innerHTML = paths.length;\n  }\n\n  getCoordinates() {\n    const inputValuesX = Array.from(document.querySelectorAll(\".coordinate-x\"));\n    const inputValuesY = Array.from(document.querySelectorAll(\".coordinate-y\"));\n    const valuesX = inputValuesX.map((item) => parseFloat(item.value));\n    const valuesY = inputValuesY.map((item) => parseFloat(item.value));\n    return valuesX.map((x, index) => ({ id: index, x: x, y: valuesY[index] }));\n  }\n\n  showCombinations(points) {\n    let combinations = [];\n    let array = points.slice();\n\n    function swap(a, b) {\n      let temporary = array[a];\n      array[a] = array[b];\n      array[b] = temporary;\n    }\n\n    function generate(n) {\n      if (n === 1) {\n        combinations.push(array.slice());\n      } else {\n        for (let i = 0; i <= n - 1; i++) {\n          generate(n - 1, array);\n          swap(n % 2 === 0 ? i : 0, n - 1);\n        }\n      }\n    }\n    generate(array.length, array);\n    return combinations;\n  }\n\n  showAllPaths() {\n    const pointsElements = Array.from(\n      document.querySelectorAll(\".coordinates__set-container\")\n    );\n    const points = pointsElements.map((item) => parseInt(item.id));\n    let pointsArray = this.showCombinations(points.slice(1));\n    for (let i = 0; i < pointsArray.length; i++) {\n      pointsArray[i].unshift(points[0]);\n      pointsArray[i].push(points[0]);\n    }\n    return pointsArray;\n  }\n\n  clearParagraphValues() {\n    const paragraphs = document.querySelectorAll(\".path-info\");\n    paragraphs.forEach((paragraph) => (paragraph.innerHTML = \"\"));\n  }\n\n  clearEntries() {\n    const results = document.querySelectorAll(\".result\");\n    results.forEach((item) => {\n      item.innerHTML = \"\";\n    });\n    this.canvasPoints.clearCanvasContext();\n    this.removeInputs();\n    this.canvasPoints.drawPointsLayer(this.getCoordinates());\n  }\n\n  removeInputs() {\n    const addedElements = document.querySelectorAll(\".coordinates__set-added\");\n    const initialInput = document.querySelectorAll(\".coords\");\n    addedElements.forEach((item) => item.remove());\n    initialInput.forEach((item) => (item.value = \"\"));\n    this.counter = 1;\n  }\n}\n","import Canvas from \"./Canvas\";\n\nexport default class CanvasGrid extends Canvas {\n  canvas = document.getElementById(\"chart-grid\");\n\n  drawGrid() {\n    const ctx = this.canvas.getContext(\"2d\");\n    const x_axis_starting_point = 1;\n    const y_axis_starting_point = 1;\n\n    for (let i = 0; i <= this.num_lines_x; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n\n      if (i === this.x_axis_distance_grid_lines) ctx.strokeStyle = \"#000000\";\n      else ctx.strokeStyle = \"#acacac\";\n\n      if (i === this.num_lines_x) {\n        ctx.moveTo(0, this.grid_size * i);\n        ctx.lineTo(this.canvas_width, this.grid_size * i);\n      } else {\n        ctx.moveTo(0, this.grid_size * i + 0.5);\n        ctx.lineTo(this.canvas_width, this.grid_size * i + 0.5);\n      }\n      ctx.stroke();\n    }\n\n    for (let i = 0; i <= this.num_lines_y; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n\n      if (i === this.y_axis_distance_grid_lines) {\n        ctx.strokeStyle = \"#121418\";\n      } else {\n        ctx.strokeStyle = \"#acacac\";\n      }\n\n      if (i === this.num_lines_y) {\n        ctx.moveTo(this.grid_size * i, 0);\n        ctx.lineTo(this.grid_size * i, this.canvas_height);\n      } else {\n        ctx.moveTo(this.grid_size * i + 0.5, 0);\n        ctx.lineTo(this.grid_size * i + 0.5, this.canvas_height);\n      }\n      ctx.stroke();\n    }\n\n    ctx.translate(\n      this.y_axis_distance_grid_lines * this.grid_size,\n      this.x_axis_distance_grid_lines * this.grid_size\n    );\n\n    for (\n      let i = 1;\n      i < this.num_lines_y - this.y_axis_distance_grid_lines;\n      i++\n    ) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      ctx.moveTo(this.grid_size * i + 0.5, -3);\n      ctx.lineTo(this.grid_size * i + 0.5, 3);\n      ctx.stroke();\n\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"start\";\n      ctx.fillText(`${x_axis_starting_point * i}`, this.grid_size * i - 2, 15);\n    }\n\n    for (let i = 1; i < this.y_axis_distance_grid_lines; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      ctx.moveTo(-this.grid_size * i + 0.5, -3);\n      ctx.lineTo(-this.grid_size * i + 0.5, 3);\n      ctx.stroke();\n\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"end\";\n      ctx.fillText(\n        `${-x_axis_starting_point * i}`,\n        -this.grid_size * i + 3,\n        15\n      );\n    }\n\n    for (\n      let i = 1;\n      i < this.num_lines_x - this.x_axis_distance_grid_lines;\n      i++\n    ) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      ctx.moveTo(-3, this.grid_size * i + 0.5);\n      ctx.lineTo(3, this.grid_size * i + 0.5);\n      ctx.stroke();\n\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"start\";\n      ctx.fillText(`${-y_axis_starting_point * i}`, 8, this.grid_size * i + 3);\n    }\n\n    for (let i = 1; i < this.x_axis_distance_grid_lines; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = \"#000000\";\n\n      ctx.moveTo(-3, -this.grid_size * i + 0.5);\n      ctx.lineTo(3, -this.grid_size * i + 0.5);\n      ctx.stroke();\n\n      ctx.font = \"11px Consolas\";\n      ctx.textAlign = \"start\";\n      ctx.fillText(`${y_axis_starting_point * i}`, 8, -this.grid_size * i + 3);\n    }\n  }\n}\n","import CoordinateSolver from \"./../assets/CoordinateSolver\";\nimport CanvasGrid from \"../assets/CanvasGrid\";\n\nconst coordinateSolver = new CoordinateSolver();\nconst canvasGrid = new CanvasGrid();\n\ncoordinateSolver.initListeners();\ncanvasGrid.drawGrid();\n"]}